shiny::runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
?sidebarPanel
?buttonInput
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
?shiny
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
runApp('~/Studing/DataScience/Reproducible_Pitch')
Train_Data <- read.csv('pml-training.csv',na.strings=c("", "NA", "NULL"))
Test_Data <- read.csv('pml-testing.csv', na.strings=c("", "NA", "NULL"))
# Remove variables that contain NA values
Training <- Train_Data[,colSums(is.na(Train_Data))==0]
Testing <- Test_Data[,colSums(is.na(Test_Data))==0]
# Remove unrelated variables
remove = c('X',
'user_name',
'raw_timestamp_part_1',
'raw_timestamp_part_2',
'cvtd_timestamp',
'new_window',
'num_window')
Training <- Training[,-which(names(Training) %in% remove)]
Testing <- Testing[,-which(names(Testing) %in% remove)]
# Remove low variance variables
zeroVar = nearZeroVar(Training[,sapply(Training, is.numeric)],
saveMetrics = TRUE)
Training = Training[,zeroVar[, 'nzv']==0]
Testing = Testing[,zeroVar[, 'nzv']==0]
# # Remove highly correlated variables (90%)
# corrMatrix <- cor(Training[sapply(Training, is.numeric)])
#
# corrDF <- expand.grid(row = 1:dim(corrMatrix)[1],
#                       col = 1:dim(corrMatrix)[2])
# corrDF$correlation <- as.vector(corrMatrix)
# levelplot(correlation ~ row+ col, corrDF)
#
# High_cor_var = findCorrelation(corrMatrix,
#                                cutoff = .90,
#                                verbose = TRUE)
# Training = Training[, -High_cor_var]
# Testing = Testing[, -High_cor_var]
# #split data
# output$text_Tree <- reactive({
#         inTrain <-createDataPartition(y=Training$classe, p=input$slider1, list=FALSE)
# })
inTrain <-createDataPartition(y=Training$classe, p=.7, list=FALSE)
Training_Data <- Training[inTrain,]
Testing_Data <- Training[-inTrain,]
set.seed(12345)
modFitDT <- rpart(classe ~ ., data = Training_Data,
method="class",
control = rpart.control(method = "cv",
number = 10))
Pre_Tree <- predict(modFitDT, Testing_Data[5,], type = "class")
getwd()
setwd(/Users/freefrog/Studing/DataScience/Reproducible_Pitch)
setwd('/Users/freefrog/Studing/DataScience/Reproducible_Pitch')
library(rpart)
library(caret)
library('e1071')
Train_Data <- read.csv('pml-training.csv',na.strings=c("", "NA", "NULL"))
Test_Data <- read.csv('pml-testing.csv', na.strings=c("", "NA", "NULL"))
# Remove variables that contain NA values
Training <- Train_Data[,colSums(is.na(Train_Data))==0]
Testing <- Test_Data[,colSums(is.na(Test_Data))==0]
# Remove unrelated variables
remove = c('X',
'user_name',
'raw_timestamp_part_1',
'raw_timestamp_part_2',
'cvtd_timestamp',
'new_window',
'num_window')
Training <- Training[,-which(names(Training) %in% remove)]
Testing <- Testing[,-which(names(Testing) %in% remove)]
# Remove low variance variables
zeroVar = nearZeroVar(Training[,sapply(Training, is.numeric)],
saveMetrics = TRUE)
Training = Training[,zeroVar[, 'nzv']==0]
Testing = Testing[,zeroVar[, 'nzv']==0]
# # Remove highly correlated variables (90%)
# corrMatrix <- cor(Training[sapply(Training, is.numeric)])
#
# corrDF <- expand.grid(row = 1:dim(corrMatrix)[1],
#                       col = 1:dim(corrMatrix)[2])
# corrDF$correlation <- as.vector(corrMatrix)
# levelplot(correlation ~ row+ col, corrDF)
#
# High_cor_var = findCorrelation(corrMatrix,
#                                cutoff = .90,
#                                verbose = TRUE)
# Training = Training[, -High_cor_var]
# Testing = Testing[, -High_cor_var]
# #split data
# output$text_Tree <- reactive({
#         inTrain <-createDataPartition(y=Training$classe, p=input$slider1, list=FALSE)
# })
inTrain <-createDataPartition(y=Training$classe, p=.7, list=FALSE)
Training_Data <- Training[inTrain,]
Testing_Data <- Training[-inTrain,]
set.seed(12345)
modFitDT <- rpart(classe ~ ., data = Training_Data,
method="class",
control = rpart.control(method = "cv",
number = 10))
Pre_Tree <- predict(modFitDT, Testing_Data[5,], type = "class")
Pre_Tree
runApp()
runApp()
runApp()
runApp()
dim(Testing_Data)
runApp()
?selectInput
runApp()
runApp()
runApp()
shiny::runApp()
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='freefrog', token='9C4E0B5D53A6C03A2F14929A1887BE83', secret='hA7zpfOcRgDlBwvyZWLs3BUHbGX0ezClcWMRjaza')
shiny::runApp()
runApp()
?selectInput
sliderInput
?sliderInput
?nearZeroVar
runApp()
runApp()
?write.csv
Train_Data <- read.csv('pml-training.csv',na.strings=c("", "NA", "NULL"))
Test_Data <- read.csv('pml-testing.csv', na.strings=c("", "NA", "NULL"))
# Remove variables that contain NA values
Training <- Train_Data[,colSums(is.na(Train_Data))==0]
Testing <- Test_Data[,colSums(is.na(Test_Data))==0]
#
# Remove unrelated variables
remove = c('X',
'user_name',
'raw_timestamp_part_1',
'raw_timestamp_part_2',
'cvtd_timestamp',
'new_window',
'num_window')
Training <- Training[,-which(names(Training) %in% remove)]
Testing <- Testing[,-which(names(Testing) %in% remove)]
# Remove low variance variables
zeroVar = nearZeroVar(Training[,sapply(Training, is.numeric)],
saveMetrics = TRUE)
Training = Training[,zeroVar[, 'nzv']==0]
Testing = Testing[,zeroVar[, 'nzv']==0]
write.csv(Training, file = "Training.csv")
a<-read.csv('training.csv')
dim(a)
Training<- read.csv('pml-training.csv',na.strings=c("", "NA", "NULL"))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
