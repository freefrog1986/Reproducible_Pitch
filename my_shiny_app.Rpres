Introduction of my first Shiny App
========================================================
author: Bo Liu
date: 17 Jul 2017
autosize: true

Open App
========================================================
This presentation is for introducing my first simple Shiny App.

Let's try this App first, open [this link](https://freefrog.shinyapps.io/Reproducible_Pitch/)
in your webbrowser to access my App.

you can find source code at [this github link](https://github.com/freefrog1986/Reproducible_Pitch)

Also there is a readme file about how to get start with this App.

This presenetation introduce more details of The App.

Loading and Cleanning data
========================================================
First loading data when running, The data for this app come from [this link](http://groupware.les.inf.puc-rio.br/har )    

Let's have a glance at the data.
```{r,echo=FALSE}
Train_Data <- read.csv('pml-training.csv',na.strings=c("", "NA", "NULL"))

dim(Train_Data)
```
There are 19622 entrans and 160 variables in this dataset.   

Then cleaning data by removing NA and unrelated variables.
```{r,echo=FALSE}
library('caret')
Training <- Train_Data[,colSums(is.na(Train_Data))==0]
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
Training <- Training[,-which(names(Training) %in% remove)] # remove NAs
zeroVar = nearZeroVar(Training[,sapply(Training, is.numeric)],
                     saveMetrics = TRUE) # Remove low variance variables
Training = Training[,zeroVar[, 'nzv']==0]
dim(Training)
```
Variabls reducing from 160 to 53.

Then split the training data into Training and Testing data. 
```{r,echo=FALSE}
inTrain <- createDataPartition(y=Training$classe, p=.7, list=FALSE)
Training_Data <- Training[inTrain,]
Testing_Data <- Training[-inTrain,]
paste("Training Data:",dim(Training_Data)[1],dim(Training_Data)[2])
paste("Testing_Data:",dim(Testing_Data)[1],dim(Testing_Data)[2])
```

Building the Model
========================================================
Depending on the user selection, we fit a Regression Tree Model or a Random Forest Model, and plot it.   
```{r, echo=FALSE}
library(rpart)
set.seed(12345)
modFitDT <- rpart(classe ~ ., data = Training_Data,
                  method="class",
                  control = rpart.control(method = "cv",
                                          number = 10))
plot(modFitDT)
text(modFitDT,cex=.8)
require(randomForest)
set.seed(12345)
Model_RF=randomForest(classe~.,
                      data=Training_Data,
                      ntree=10, 
                      importance=TRUE)
varImpPlot(Model_RF)
```

You have to be patient cause this part run a bit slow.

Testing the model
========================================================
By selecting a value from the slider of this app, you can test this two model.   
When selecting a value, server will predict using models.   
Then show results and real value to the interface for comparing.   
```{r,eval=FALSE}
output$text_Tree <- renderText({
                User_Selected_Data <- input$slider1
                Pre_Tree <- predict(modFitDT, Testing_Data[User_Selected_Data,], type = "class")
                paste("Prediction value:",as.character(Pre_Tree),sep="")
        })
        
        output$text_True <- reactive({
                User_Selected_Data <- input$slider1
                data<-as.character(Testing_Data[User_Selected_Data,]$classe)
                paste("True value:",data,sep="")
        })
```


